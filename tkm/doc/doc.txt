===================================
== Introduction
===================================

Cette application est un gestionnaire minimaliste de tickets et workflows.
Ou plutôt, il s'agit d'un méta gestionnaire de tickets, dans lequel on définira
les formulaires et workflows à suivre (dans l'interface d'admin), le moteur se
chargeant de générer le gestionnaire de ticket correspondant.

Q&A

Q : Mon client a déjà un Bugzilla/Mantis/Trac/... a quoi ça sert votre truc ?
R : à rien

Q : Donc on en fait quoi de votre machin ?
R : on ne le met surtout pas en prod, il n'est pas supporté.

Q : Mais pourquoi donc avoir fait un bidule inutile ?
A : c'était l'occasion de mettre en pratique énormément de concepts Django et
	Python. Entre autres :
		*Signaux
		*Authentification
		*Gestion des droits
		*Génération dynamique de formulaires
		*Population lors du syncdb
		*Chargement de fixtures
	En prime, c'était une occasion de se venger de Mantis en faisant mieux en 
	moins de 1000 lignes de code.
	
Conclusion : cette application est à prendre *uniquement* en tant qu'exemple
			 pour ces concepts. 



===================================
== Fonctionnalités
===================================

Beaucoup d'inutile, rien de vraiment utile...

*alertes mail
*formulaires entièrement dynamiques : définissez vos listes, vos champs texte,
 votre mise en page...
*définition très complète d'un workflow, ave conditions complexes sur tous les
 champs.
*plusieurs types de tickets possibles par projet pour autant de besoins 
 spécifiques
*Recherche sur tous les champs, dont plein texte.
*Une merveilleuse config par défaut. 



===================================
== Structure d'un workflow
===================================

Un workflow est caractérisé par des états reliés entre eux par des transitions.

Chaque transition peut porter de 0 à n conditions simples portant sur d'autres
champs de type liste déroulante. (valeur liste == , <=, >=)

Un workflow est lui-même une liste déroulante, une classe de ticket suivra donc
un workflow a condition que ce champ lui soit ajouté.
Incidemment, il est possible d'avoir plusieurs workflows dans la même classe de
tickets, avec des conditions de transition croisées. Attention aux deadlocks !



===================================
== API
===================================

Cette application étant inutile, elle n'a pas d'API.



===================================
== Dépendances & abonnements
===================================

Cette application écoute les signaux émis lors des installations, pour 
déterminer si un ou des tickets doivent être passés à un autre état en 
conséquence.

Elle dépend du module ref pour la liste des environnements.
Elle dépend du module gph pour l'affichage du workflow.
Elle dépend du module prm pour la gestion des paramètres.



===================================
== Utilisation (programmeur)
===================================

Le programmeur oisif pourra étendre cette application à loisir.



===================================
== Utilisation (vulgus pecum)
===================================



===================================
== Exemples
===================================
